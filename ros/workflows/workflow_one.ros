ros: 0.1
info:
  version: 0.0.1
  title: Ros Workflow One
  description: A workflow orchestrating the construction and validation of a graphical knowledge network.

import:
  - bionames
  
workflow:

  disease_identifiers:
    doc: |
      Resolve an English disease name to ontology identifiers.
    code: bionames
    args:
      type: disease
      input: $disease_name
        
  condition_to_drug:
    doc: |
      Module 1
        * What are the defining symptoms / phenotypes of [condition x]?
        * What conditions present [symptoms]?
        * Filter [conditions] to only keep ones with defined genetic causes.
        * What subset of conditions are most representative of [conditions]? (find archetypes)
      Module 2
        * What genes are implicated in [condition]?
        * What subset of genes are most representative of [conditions]?  (find archetypes)
        * What pathways/processes are [genes] involved in?
        * What genes are involved in [pathway/process]?
        * What drugs/compounds target gene products of [gene]?
      Invoke XRay module 1 and 2 given the disease identifier from bionames.
      The graph argument references the entire bionames response.
      The op argument specifies the XRay operation to execute.
    code: xray
    args:
      op: condition_expansion_to_gene_pathway_drug
      graph: $disease_identifiers

  module_3:
    doc: |
      Passes the output of the disease_identifiers operator to Gamma.
    code: gamma
    args:
      op: module_wf1_mod3
      conditions: $disease_identifiers
      
  biothings_module_4_and_5:
    doc: |
      Module 5
        * What are the common side effects of [drug]?
        * What is the approval status of [drug]?
        * What are the approved indications for [drug]?
        * What is the established pharm class for [drug]?
      Uses BioThings to get drug annotations for each drug.
      Accepts module 1s entire graph as input.
    code: biothings
    args:
      op: annotate_drugs
      graph: $condition_to_drug

  automated_validation:
    doc: |
      Automated Validation
         We can test the knowledge network with constraints including all, match, and none.
         The depends arg ensures the validation runs only after the graph is built.
         Each test has a name, documentation, a query, and an operator defining the constraint to enforce
      Syfur
         A principal virtue of Ros is the ability to remotely execute workflows.
         To make this possible, it must be secured against remote code execution attacks
         This includes cypher injection.
         It may be possible to accomplish some of this in other ways, but for now, we provide Syfur
         Syfur is a restricted DSL that translates to a subset of Cypher. See examples below.
    code: validate
    args:
      depends: $biothings_module_4_and_5
      tests:
        test_type_2_diabetes_exists:
          doc: Ensure type 2 diabetes mellitus and other conditions are present.
          items: "match type=disease return id"
          all: [ "OMIM:600001", "MONDO:0005148", "DOID:9352" ]
        test_pioglitazone:
          doc: Test attributes of a specific chemical. Ensure type 2 diabetes mellitus is present.
          items: "match type=chemical_substance id=CHEMBL.COMPOUND:CHEMBL595 return node_attributes"
          match:
            - .*Thiazolidinedione.*
            - ".*{'name': 'EPC', 'value': 'Peroxisome Proliferator Receptor gamma Agonist'}.*"
        test_absence_of_something:
          doc: Verify there is none of something in our graph.
          items: "match return id"
          none: [ 'BAD:123' ]

  return:
    doc: |
      Union answers.
    code: union
    args:
      elements:
        - biothings_module_4_and_5
        - condition_to_drug
        - module_3
        



              
